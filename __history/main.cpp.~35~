// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "main.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
// #pragma link "msvcrt.lib"
#pragma link "GdViewerPro4_OCX"
#pragma resource "*.dfm"
TForm1* Form1;

// ---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner) {
	DragAcceptFiles(Handle, true);  // Enable D&D

	Gdv0->LicenseKEY = WideString(L"6223560888372426056441256");

	IniFile = TPath::Combine(ExtractFilePath(Application->ExeName), "v2iewx.ini");
	KeyFile = TPath::Combine(ExtractFilePath(Application->ExeName), "key.ini");
	LangFile = TPath::Combine(ExtractFilePath(Application->ExeName), "lang.ini");
	RecentFile = TPath::Combine(ExtractFilePath(Application->ExeName), "recent.ini");

	hSPI = new TObjectList();
	flst = new TObjectList();
	paramStr = new TStringList();
	RecentList = new TStringList();

	fn_LoadLang();
	fn_LoadIni();
	fn_LoadRecent();

	KeyConf = new TMemIniFile(KeyFile);
	Recent = new TMemIniFile(RecentFile);

	if (ParamCount() > 0) {
		for (int i = 1; i <= ParamCount(); ++i) {
			paramStr->Add(ParamStr(i));
		}
		fn_ParseFiles(paramStr);
	}
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::FormDestroy(TObject* Sender) {
	delete KeyConf;
	delete hSPI;
	delete flst;
	delete paramStr;
	fn_SaveIni();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::FormResize(TObject* Sender) {
	if (ToolBar->Visible) {
		ToolBar->Indent = (ToolBar->Width - 359) / 2;
	}
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::ScrollBarChange(TObject* Sender) {
	if (flst->Count == 0)
		return;

	fn_LoadImage(Gdv0, (TFI*)flst->Items[ScrollBar->Position - 1]);
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::DropFiles(TWMDropFiles Msg) {
	TStringList* list = new TStringList();
	wchar_t* fn = new wchar_t[MAX_PATH];

	int n = DragQueryFileW((HDROP)Msg.Drop, -1, NULL, 0);

	for (int i = 0; i < n; ++i) {
		DragQueryFileW((HDROP)Msg.Drop, i, fn, MAX_PATH);
		list->Add(String(fn));
	}

	fn_ParseFiles(list);

	delete[] fn;
	delete list;

	DragFinish((HDROP)Msg.Drop);
}

#pragma region " mnuFile "

// ---------------------------------------------------------------------------
// [File]-[New Window]
void __fastcall TForm1::mnuFileNewWindowClick(TObject* Sender) {
	fn_NewWindow();
}

// ---------------------------------------------------------------------------
// [File]-[Open File...]
void __fastcall TForm1::mnuFileOpenFileClick(TObject* Sender) {
	fn_FileOpenDialogEx(false);
}

// ---------------------------------------------------------------------------
// [File]-[Open Folder...]
void __fastcall TForm1::mnuFileOpenFolderClick(TObject* Sender) {
	fn_FileOpenDialogEx(true);
}

// ---------------------------------------------------------------------------
// [File]-[Delete]
void __fastcall TForm1::mnuFileDeleteClick(TObject* Sender) {
	fn_DeleteFile(FOF_ALLOWUNDO);
}

// ---------------------------------------------------------------------------
// [File]-[Slide Show]
void __fastcall TForm1::mnuPlaySlideShowClick(TObject* Sender) {
	fn_SlideShow();
}

// ---------------------------------------------------------------------------
// [File]-[Exit]
void __fastcall TForm1::mnuFileExitClick(TObject* Sender) {
	exit(0);
}

#pragma end_region

#pragma region " mnuEdit "

// ---------------------------------------------------------------------------
// [Edit]-[Image Copy]
void __fastcall TForm1::mnuEditCopyClick(TObject* Sender) {
	fn_ImageCopy();
}

// ---------------------------------------------------------------------------
// [Edit]-[Path Copy]
void __fastcall TForm1::mnuEditPathClick(TObject* Sender) {
	fn_PathCopy();
}

#pragma end_region

#pragma region " mnuView "

// ---------------------------------------------------------------------------
// [View]-[Menu Bar]
void __fastcall TForm1::mnuViewMainMenuClick(TObject* Sender) {
	fn_MainMenu(!MainMenu->Tag);
}

// ---------------------------------------------------------------------------
// [View]-[Scroll Bar]
void __fastcall TForm1::mnuViewScrollBarClick(TObject* Sender) {
	fn_ScrollBar(!ScrollBar->Visible);
}

// ---------------------------------------------------------------------------
// [View]-[Tool Bar]
void __fastcall TForm1::mnuViewToolBarClick(TObject* Sender) {
	fn_ToolBar(!ToolBar->Visible);
}

// ---------------------------------------------------------------------------
// [View]-[Status Bar]
void __fastcall TForm1::mnuViewStatusBarClick(TObject* Sender) {
	fn_StatusBar(!StatusBar->Visible);
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::mnuViewSpreadViewNoneClick(TObject* Sender) {
	fn_SpreadView(0);
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::mnuViewSpreadViewRightClick(TObject* Sender) {
	fn_SpreadView(1);
}

// ---------------------------------------------------------------------------

void __fastcall TForm1::mnuViewSpreadViewLeftClick(TObject* Sender) {
	fn_SpreadView(2);
}

// ---------------------------------------------------------------------------
// [View]-[Rotate Left]
void __fastcall TForm1::mnuViewRotateLeftClick(TObject* Sender) {
	fn_RotateLeft();
}

// ---------------------------------------------------------------------------
// [View]-[Rotate Right]
void __fastcall TForm1::mnuViewRotateRightClick(TObject* Sender) {
	fn_RotateRight();
}

// ---------------------------------------------------------------------------
// [View]-[Keep Rotate]
void __fastcall TForm1::mnuViewKeepRotClick(TObject* Sender) {
	fn_KeepRot(!mnuViewKeepRot->Checked);
}

// ---------------------------------------------------------------------------
// [View]-[Actual Siza]
void __fastcall TForm1::mnuViewActualClick(TObject* Sender) {
	fn_ZoomMode(1);
}

// ---------------------------------------------------------------------------
// [View]-[Bestfit]
void __fastcall TForm1::mnuViewBestfitClick(TObject* Sender) {
	fn_ZoomMode(2);
}

// ---------------------------------------------------------------------------
// [View]-[In Window]
void __fastcall TForm1::mnuViewInWindowClick(TObject* Sender) {
	fn_ZoomMode(99);
}

// ---------------------------------------------------------------------------
// [View]-[Spread to Window]
void __fastcall TForm1::mnuViewSpreadClick(TObject* Sender) {
	fn_ZoomMode(6);
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuViewOptimizeWindowSizeClick(TObject* Sender) {
	fn_OptimizeWindowSize(!mnuViewOptimizeWindowSize->Checked);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Name]
void __fastcall TForm1::mnuViewOrderNameClick(TObject* Sender) {
	fn_Sort(kByName, conf.asc);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Natulal Number]
void __fastcall TForm1::mnuViewOrderNameNumClick(TObject* Sender) {
	fn_Sort(kByNameNum, conf.asc);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Modifi Date]
void __fastcall TForm1::mnuViewOrderDateClick(TObject* Sender) {
	fn_Sort(kByTime, conf.asc);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Type]
void __fastcall TForm1::mnuViewOrderTypeClick(TObject* Sender) {
	fn_Sort(kByType, conf.asc);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Size]
void __fastcall TForm1::mnuViewOrderSizeClick(TObject* Sender) {
	fn_Sort(kBySize, conf.asc);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Asc]
void __fastcall TForm1::mnuViewOrderAscClick(TObject* Sender) {
	fn_Sort(conf.order, true);
}

// ---------------------------------------------------------------------------
// [View]-[Order]-[Desc]
void __fastcall TForm1::mnuViewOrderDescClick(TObject* Sender) {
	fn_Sort(conf.order, false);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[Auto]
void __fastcall TForm1::mnuViewQualityAutoClick(TObject* Sender) {
	fn_Quality(Auto);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[Low]
void __fastcall TForm1::mnuViewQualityLowClick(TObject* Sender) {
	fn_Quality(Low);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[Bilinear]
void __fastcall TForm1::mnuViewQualityBilinearClick(TObject* Sender) {
	fn_Quality(Bilinear);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[Bicubic]
void __fastcall TForm1::mnuViewQualityBicubicClick(TObject* Sender) {
	fn_Quality(Bicubic);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[BilinearHQ]
void __fastcall TForm1::mnuViewQualityBilinearHQClick(TObject* Sender) {
	fn_Quality(BilinearHQ);
}

// ---------------------------------------------------------------------------
// [View]-[Quality]-[BicubicHQ]
void __fastcall TForm1::mnuViewQualityBicubicHQClick(TObject* Sender) {
	fn_Quality(BicubicHQ);
}

// ---------------------------------------------------------------------------
// [View]-[Optimize Drawing Speed]
void __fastcall TForm1::mnuViewOptimizeDrawingSpeedClick(TObject* Sender) {
	fn_OptimizeDrawingSpeed(!Gdv0->OptimizeDrawingSpeed);
}

// ---------------------------------------------------------------------------
// [View]-[Full Screen]
void __fastcall TForm1::mnuViewFullScreenClick(TObject* Sender) {
	fn_FullScreen();
}

#pragma end_region

#pragma region " mnuPlay "

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuPlayPrevFrameClick(TObject* Sender) {
	fn_PrevFrame();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuPlayNextFrameClick(TObject* Sender) {
	fn_NextFrame();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuPlayPrevClick(TObject* Sender) {
	fn_Prev();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuPlayNextClick(TObject* Sender) {
	fn_Next();
}

#pragma end_region

#pragma region " mnuTools "

// ---------------------------------------------------------------------------
// [Tools]-[Options]
void __fastcall TForm1::mnuToolsOptionClick(TObject* Sender) {
	fn_Options();
}

#pragma end_region

#pragma region " mnuHelp "

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::mnuHelpAboutClick(TObject* Sender) {
	Form2->ShowModal();
}

#pragma end_region

#pragma region " ToolBar "

// ---------------------------------------------------------------------------
// [ToolBar]-[Prev]
void __fastcall TForm1::tbtnPrevClick(TObject* Sender) {
	fn_Prev();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Next]
void __fastcall TForm1::tbtnNextClick(TObject* Sender) {
	fn_Next();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Bestfit]
void __fastcall TForm1::tbtnBestfitClick(TObject* Sender) {
	fn_ZoomMode(2);
}

// ---------------------------------------------------------------------------
// [ToolBar]-[In window]
void __fastcall TForm1::tbtnInWindowClick(TObject* Sender) {
	fn_ZoomMode(99);
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Actual size]
void __fastcall TForm1::tbtnActualClick(TObject* Sender) {
	fn_ZoomMode(1);
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Spread to window]
void __fastcall TForm1::tbtnSpreadClick(TObject* Sender) {
	fn_ZoomMode(6);
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::tbtnSpreadViewClick(TObject* Sender) {
	switch (conf.SpreadView) {
		case 0:
			fn_SpreadView(1);
			break;
		case 1:
			fn_SpreadView(2);
			break;
		case 2:
			fn_SpreadView(0);
			break;
	}
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Slide Show]
void __fastcall TForm1::tbtnSlideShowClick(TObject* Sender) {
	fn_SlideShow();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Zoom in]
void __fastcall TForm1::tbtnZoomInClick(TObject* Sender) {
	fn_ZoomIn();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Zoon out]
void __fastcall TForm1::tbtnZoomOutClick(TObject* Sender) {
	fn_ZoomOut();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Right rot]
void __fastcall TForm1::tbtnRotateLeftClick(TObject* Sender) {
	fn_RotateLeft();
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Left rot]
void __fastcall TForm1::tbtnRotateRightClick(TObject* Sender) {
	fn_RotateRight();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::tbtnKeepRotClick(TObject* Sender) {
	fn_KeepRot(!mnuViewKeepRot->Checked);
}

//---------------------------------------------------------------------------
//
void __fastcall TForm1::tbtnTrashClick(TObject* Sender) {
	fn_DeleteFile(FOF_ALLOWUNDO);
}

// ---------------------------------------------------------------------------
// [ToolBar]-[Delete]
void __fastcall TForm1::tbtnDeleteClick(TObject* Sender) {
	fn_DeleteFile(FOF_NOCONFIRMATION);
}

#pragma end_region

#pragma region " Susie Plug-in "

// ---------------------------------------------------------------------------
// Loading Susie Plug-in
void __fastcall TForm1::SPI_LoadPlugin(String path) {
	TSearchRec sr;

	if (FindFirst(TPath::Combine(path, L"*.spi"), 0, sr) == 0) {
		do {
			hSPI->Add((TObject*)LoadLibraryW(TPath::Combine(path, sr.Name).w_str()));
		} while (!FindNext(sr));
		// FindClose(sr);
	}

	FindClose(sr);
}

// ---------------------------------------------------------------------------
//
HBITMAP __fastcall TForm1::SPI_LoadImage(String fileName) {
	/* 対応プラグインの検索 */
	for (int i = 0; i < hSPI->Count; i++) {  // プラグイン関数の取得
		SPI_ISSUPPORTED spi_issupported = (SPI_ISSUPPORTED)GetProcAddress((HMODULE)hSPI->Items[i], SPIPROC_ISSUPPORTED);
		SPI_GETPICTURE spi_getpicture = (SPI_GETPICTURE)GetProcAddress((HMODULE)hSPI->Items[i], SPIPROC_GETPICTURE);

		if (spi_issupported == NULL || spi_getpicture == NULL) {
			continue;
		}

		// ファイル内容をロードする
		HANDLE handle;  // = NULL;

		if ((handle = CreateFile_Read(fileName.w_str())) == INVALID_HANDLE_VALUE) {
			return NULL;
		}

		DWORD filesize = GetFileSize(handle, NULL), readsize;
		LPSTR data = (LPSTR)Heap_Malloc(filesize);
		SetFilePointer(handle, 0, NULL, FILE_BEGIN);

		if (!ReadFile(handle, data, filesize, &readsize, NULL)) {
			CloseHandle(handle);
		}

		CloseHandle(handle);

		// ロードできる形式かどうかをチェックする
		if (spi_issupported(AnsiString(fileName).c_str(), (DWORD)data) == 0) {
			Heap_Free(data);
			continue;
		}

		// 画像を展開する
		HLOCAL info, bm;
		if (spi_getpicture(data, filesize, 1, &info, &bm, NULL, 0) != 0) {
			Heap_Free(data);
		}

		LPBITMAPINFO bmpinfo = (LPBITMAPINFO)LocalLock(info);  // BITMAPINFO構造体
		LPBYTE bmbits = (LPBYTE)LocalLock(bm);                 // 画像データ

		// 取得した情報からBITMAPハンドルを生成する
		HDC dc = GetDC(0);
		HBITMAP bitmap = CreateDIBitmap(dc, &bmpinfo->bmiHeader, CBM_INIT, bmbits, bmpinfo, DIB_RGB_COLORS);
		ReleaseDC(0, dc);

		// いろいろと開放
		LocalUnlock(info);
		LocalFree(info);
		LocalUnlock(bm);
		LocalFree(bm);
		Heap_Free(data);

		return bitmap;
	}

	return NULL;
}

#pragma end_region

#pragma region " Mouse "

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::FormMouseWheel(TObject* Sender, TShiftState Shift, int WheelDelta, TPoint& MousePos, bool& Handled) {
	// if (mg.enabled) {
	if (mg.Enabled) {
		if (WheelDelta > 0) {
			fn_ZoomOut();
		} else {
			fn_ZoomIn();
		}
		fn_StatusText();
	} else {
		if (WheelDelta > 0) {
			fn_Prev();
		} else {
			fn_Next();
		}
	}
	Handled = true;
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::Gdv0ClickControl(TObject* Sender) {
	// TPoint pt;
	// GetCursorPos(&pt);
	// pt = Panel0->ScreenToClient(pt);
	//
	// if (Panel0->Width / 2 > pt.X) {
	// fn_Prev();
	// } else {
	// fn_Next();
	// }
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::Gdv0DblClickControl(TObject* Sender) {
	if (mnuViewBestfit->Checked) {
		fn_ZoomMode(Gdv0, 1);
	} else if (mnuViewActual->Checked) {
		fn_ZoomMode(Gdv0, 2);
	}
	fn_StatusText();
}

// ---------------------------------------------------------------------------
// Mouse Gestures
void __fastcall TForm1::Gdv0MouseDownControl(TObject* Sender, short* Button, short* shift, float* X, float* Y) {
	if (Button[0] == MouseButtonMiddle) {
		fn_Reset(Gdv0);
	}
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::Gdv0MouseMoveControl(TObject* Sender, short* Button, short* shift, float* X, float* Y) {
	//
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::Gdv0MouseUpControl(TObject* Sender, short* Button, short* shift, float* X, float* Y) {
	if (Button[0] == MouseButtonRight) {
		mg.Enabled = false;
	}
}

#pragma end_region

#pragma region " KeyDown "

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::FormKeyDown(TObject* Sender, WORD& Key, TShiftState Shift) {
	String code;
	code = code.sprintf(L"%1x%02x", Shift.ToInt(), Key);
	ExecAction(KeyConf->ReadString(L"key", code, NULL).LowerCase());
	// Key = NULL;
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::ExecAction(String value) {
	if (value == "exit") {
		exit(0);
	} else if (value == "openfile") {
		fn_FileOpenDialogEx(false);
	} else if (value == "openfolder") {
		fn_FileOpenDialogEx(true);
	} else if (value == "exit") {
		exit(0);
	}
	// else if (value == "alwaysontop")
	// fn_AlwaysOnTop(!mnuViewAlwaysOnTop->Checked);
	else if (value == "fullscreen") {
		fn_FullScreen();
	}
	// else if (value == "fullscreenrestore")
	// fn_FullScreen(false);
	else if (value == "options") {
		fn_Options();
	} else if (value == "slideshow") {
		fn_SlideShow();
	} else if (value == "mainmenu") {
		fn_MainMenu(!MainMenu->Tag);
	} else if (value == "scrollbar") {
		fn_ScrollBar(!ScrollBar->Visible);
	} else if (value == "toolbar") {
		fn_ToolBar(!ToolBar->Visible);
	} else if (value == "statusbar") {
		fn_StatusBar(!StatusBar->Visible);
	} else if (value == "reset") {
		fn_Reset();
	} else if (value == "next") {
		fn_Next();
	} else if (value == "prev") {
		fn_Prev();
	} else if (value == "nextframe") {
		fn_NextFrame();
	} else if (value == "prevframe") {
		fn_PrevFrame();
	} else if (value == "first") {
		fn_LoadImage(Gdv0, (TFI*)flst->Items[0]);
	} else if (value == "last") {
		fn_LoadImage(Gdv0, (TFI*)flst->Items[ScrollBar->Max - 1]);
	} else if (value == "zoomin") {
		fn_ZoomIn();
	} else if (value == "zoomout") {
		fn_ZoomOut();
	} else if (value == "rotateright") {
		fn_RotateRight();
	} else if (value == "rotateleft") {
		fn_RotateLeft();
	} else if (value == "windowmaximize") {
		fn_WindowMaximize();
	} else if (value == "windowminimize") {
		fn_WindowMinimize();
	} else if (value == "fileopendialog") {
		fn_FileOpenDialog(fdoAllowMultiSelect | fdoPathMustExist | fdoFileMustExist);
	} else if (value == "keeprot") {
		fn_KeepRot(!mnuViewKeepRot->Checked);
	} else if (value == "bestfit") {
		fn_ZoomMode(2);
	} else if (value == "spread") {
		fn_ZoomMode(6);
	} else if (value == "inwindow") {
		fn_ZoomMode(99);
	} else if (value == "actual") {
		fn_ZoomMode(1);
	} else if (value == "quality_low") {
		fn_Quality(Low);
	} else if (value == "quality_bilinear") {
		fn_Quality(Bilinear);
	} else if (value == "quality_bicubic") {
		fn_Quality(Bicubic);
	} else if (value == "quality_bilinearhq") {
		fn_Quality(BilinearHQ);
	} else if (value == "quality_bicubichq") {
		fn_Quality(BicubicHQ);
	} else if (value == "filetotrash") {
		fn_DeleteFile(FOF_ALLOWUNDO);
	} else if (value == "filetotrash_noconfirmation") {
		fn_DeleteFile(FOF_ALLOWUNDO | FOF_NOCONFIRMATION);
	} else if (value == "optimizedrawingspeed") {
		fn_OptimizeDrawingSpeed(!Gdv0->OptimizeDrawingSpeed);
	} else if (value == "quality_auto") {
		fn_Quality(Auto);
	}
	// else if (value == "properties")
	// fn_properties();
}

#pragma end_region

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::TimerTimer(TObject* Sender) {
	fn_Next();
}

// ---------------------------------------------------------------------------
//
void __fastcall TForm1::DisplayFromFile(TGdViewer* gv, String sFilePath) {
	FullPath = sFilePath;

	if (mnuViewEngineWic->Checked) {
//		TWICHelper* wic = new TWICHelper();
//		if (wic->IsInitialized()) {
//			gv->DisplayFromHBitmap((long)wic->LoadImage(sFilePath)->Handle);
//		}
//		delete wic;
		gv->DisplayFromHBitmap((long)LoadFromWICFile(sFilePath)->Handle);
	} else {
		TFileStream* fs = new TFileStream(sFilePath, fmShareDenyNone);
		char* buf = new char[fs->Size];
		fs->Read(buf, fs->Size);
		long g = fs->Size;
		gv->DisplayFromMemory((long)buf, &g);
		delete fs;
		delete[] buf;
	}
}

TBitmap* __fastcall TForm1::LoadFromWICFile(String sFilePath) {
	try {
        TWICImage* wicImage = new TWICImage();
        TBitmap* bitmap = new TBitmap();

		try {
			// ファイル読み込み
			wicImage->LoadFromFile(sFilePath);

            // TBitmapにassign
            bitmap->Assign(wicImage);

            // 使用例：Image1に設定
			return bitmap;
		} __finally {
            delete wicImage;
            delete bitmap;
        }
	} catch (const Exception& e) {
		ShowMessage("Error: " + e.Message);
	}
}

// ---------------------------------------------------------------------------
//
// void __fastcall TForm1::DisplayFromFile(TGdViewer* gv, String sFilePath) {
// FREE_IMAGE_FORMAT format = FreeImage_GetFIFFromFilenameU(sFilePath.w_str());
// FIBITMAP *dib  = FreeImage_LoadU(format, sFilePath.w_str(), 0);
//
//
// HBITMAP bitmap = CreateDIBitmap((HDC)gv->hdc, FreeImage_GetInfoHeader(dib),
//
// CBM_INIT, FreeImage_GetBits(dib), FreeImage_GetInfo(dib), DIB_RGB_COLORS);
//
// //gv->DisplayFromHBitmap((long)bitmap);
// img0->Picture->Bitmap->Handle = bitmap;
// FreeImage_Unload(dib);
//
// }
// ---------------------------------------------------------------------------
//
void __fastcall TForm1::pumCopyToDesktopClick(TObject* Sender) {
	if (flst->Count == 0)
		return;

	TFI* fi = (TFI*)(flst->Items[ScrollBar->Position - 1]);

	wchar_t buff[MAX_PATH];
	SHGetSpecialFolderPathW(NULL, buff, CSIDL_DESKTOPDIRECTORY, false);

	TFile::Copy(fi->FullName, TPath::Combine(String(buff), fi->Name));
}

//---------------------------------------------------------------------------
void __fastcall TForm1::mnuViewEngineGdViewerClick(TObject *Sender)
{
	mnuViewEngineGdViewer->Checked = true;
	mnuViewEngineWic->Checked = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::mnuViewEngineWicClick(TObject *Sender)
{
	mnuViewEngineGdViewer->Checked = false;
	mnuViewEngineWic->Checked = true;
}
//---------------------------------------------------------------------------

